@page "/AddOrUpdateProduct"
@inject AddOrUpdateProductViewModel viewModel;

<MudStack>
    <MudPaper Class="pa-4">
        <MudStack Spacing="4">
            <MudTextField @bind-Value="viewModel.Name" Label="Name" Variant="Variant.Text"></MudTextField>
            <MudTextField @bind-Value="viewModel.PriceAmount" Label="Value Added Tax" Variant="Variant.Text"></MudTextField>
            <MudSelect T="CountingUnitType" @bind-Value="CountingUnitType" Label="Counting Unit Type" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" ReadOnly="true">
                <MudSelectItem T="CountingUnitType" Value="CountingUnitType.Number" />
            </MudSelect>
        </MudStack>
    </MudPaper>
    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Color="Color.Info" Disabled="viewModel.IsBusy" OnClick="(arg) => viewModel.SaveCommand.Execute(null)">
        @if (viewModel.IsBusy)
        {
            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
            <MudText Class="ms-2">Saving</MudText>
        }
        else
        {
            <MudText>Save</MudText>
        }
    </MudButton>
</MudStack>

@code {
    public AddOrUpdateProductViewModel ViewModel
    {
        get
        {
            return viewModel;
        }
    }
    CountingUnitType CountingUnitType = CountingUnitType.Number;
    protected override Task OnInitializedAsync()
    {
        viewModel.BindPropertyChanged(StateHasChanged);
        return base.OnInitializedAsync();
    }
}
