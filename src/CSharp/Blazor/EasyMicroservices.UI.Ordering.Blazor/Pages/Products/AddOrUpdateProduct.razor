@page "/AddOrUpdateProduct"
@using EasyMicroservices.UI.Cores
@using EasyMicroservices.UI.Ordering.ViewModels.Products;
@using MudBlazor
@using global::Ordering.GeneratedServices;
@inject AddOrUpdateProductViewModel viewModel;

<MudRTLProvider RightToLeft="BaseViewModel.IsRightToLeft">
    <MudStack>
        <MudPaper Class="pa-4">
            <MudStack Spacing="4">
                
                <MudTextField @bind-Value="viewModel.Name" Label="@viewModel.GetInnerTranslatedByKey("Name")" Variant="Variant.Text"></MudTextField>
                <MudTextField @bind-Value="viewModel.PriceAmount" Label="@viewModel.GetInnerTranslatedByKey("Ordering_ValueAddedTax_Title")" Variant="Variant.Text"></MudTextField>
                <MudTextField @bind-Value="viewModel.ExternalServiceIdentifier" Label="@viewModel.GetInnerTranslatedByKey("Ordering_ExternalServiceIdentifier_Title")" Variant="Variant.Text"></MudTextField>
                <MudSelect @bind-Value="viewModel.AmountType" Label="@viewModel.GetInnerTranslatedByKey("Ordering_AmountType_Title")" OpenIcon="@Icons.Material.Filled.LocalDrink" AdornmentColor="Color.Secondary">
                    @foreach (AmountType item in Enum.GetValues<AmountType>())
                    {
                        if ((int)item < 6)
                            continue;
                        <MudSelectItem Value="@item">@viewModel.GetInnerTranslatedByKey($"Ordering_{item.ToString()}_Title")</MudSelectItem>
                    }
                </MudSelect>
                @if (viewModel.CountingUnits is not null)
                {
                    <MudSelect T="long" @bind-Value="viewModel.SelectedCountingUnitId" Label="@viewModel.GetInnerTranslatedByKey("Ordering_CountingUnitType_Title")" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                        @foreach (var item in viewModel.CountingUnits)
                        {
                            <MudSelectItem Value="@item.Id">@item.Name</MudSelectItem>
                        }
                    </MudSelect>
                }
            </MudStack>
        </MudPaper>
        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Color="Color.Info" Disabled="viewModel.IsBusy" OnClick="(arg) => viewModel.SaveCommand.Execute(null)">
            @if (viewModel.IsBusy)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                <MudText Class="ms-2">@viewModel.GetInnerTranslatedByKey("Saving")</MudText>
            }
            else
            {
                <MudText>@viewModel.GetInnerTranslatedByKey("Save")</MudText>
            }
        </MudButton>
    </MudStack>
</MudRTLProvider>


@code {
    public AddOrUpdateProductViewModel ViewModel
    {
        get
        {
            return viewModel;
        }
    }

    protected override Task OnInitializedAsync()
    {
        _ = viewModel.LoadConfig();
        viewModel.BindPropertyChanged(StateHasChanged);
        return base.OnInitializedAsync();
    }
}
