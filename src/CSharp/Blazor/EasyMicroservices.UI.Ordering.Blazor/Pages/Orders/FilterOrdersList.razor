@page "/FilterOrdersList"
@using EasyMicroservices.UI.Cores
@using EasyMicroservices.UI.Ordering.ViewModels.Orders;
@using MudBlazor
@using global::Ordering.GeneratedServices;
@inject FilterOrdersListViewModel viewModel;
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudRTLProvider RightToLeft="BaseViewModel.IsRightToLeft">
    <MudDataGrid T="OrderContract" MultiSelection="true" Items="viewModel.Orders" SortMode="SortMode.Multiple" Filterable="true"
                 Hideable="true">
        <ToolBarContent>
            <MudText Typo="Typo.h6">@viewModel.GetInnerTranslatedByKey("Orders")</MudText>
                <MudSpacer />
                <MudTextField @bind-Value="_searchString" Placeholder="@viewModel.GetInnerTranslatedByKey("Search")" Adornment="Adornment.Start" Immediate="true"
                              AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Search" Color="Color.Info" Disabled="viewModel.IsBusy" OnClick="(arg) => viewModel.SearchCommand.Execute(null)">
                    @if (viewModel.IsBusy)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    <MudText Class="ms-2">@viewModel.GetInnerTranslatedByKey("Processing")</MudText>
                }
                else
                {
                    <MudText>@viewModel.GetInnerTranslatedByKey("Search")</MudText>
                }
            </MudButton>
        </ToolBarContent>
        <Columns>
            <SelectColumn T="OrderContract" />
            <PropertyColumn Property="x => x.Id" Title="@viewModel.GetInnerTranslatedByKey("Id")" />
            <PropertyColumn Property="x => x.Name" Title="@viewModel.GetInnerTranslatedByKey("Name")" />
            <PropertyColumn Property="x => x.Prices.Select(x => x.Amount).DefaultIfEmpty(0).FirstOrDefault()" Title="@viewModel.GetInnerTranslatedByKey("Amount")" />
            @* <PropertyColumn Property="x => x.Product.Name" Title="Product Name" /> *@
            <TemplateColumn CellClass="d-flex justify-end">
                <CellTemplate>
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="(arg) => OnEdit(context.Item)" />
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete" Color="Color.Error" OnClick="(arg) => ShowDeleteDialog(context.Item)" />
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <PagerContent>
            <MudDataGridPager T="OrderContract" />
        </PagerContent>
    </MudDataGrid>
    <MudDialog Class="@DialogClass" @bind-IsVisible="IsShowEditDialog" Options="DialogOptions">
        <TitleContent>
            <MudText Typo="Typo.h6">
                <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3" /> Edit Order
            </MudText>
        </TitleContent>
        <DialogContent>
            <AddOrUpdateOrder @ref="addOrUpdateOrderView" />
        </DialogContent>
    </MudDialog>
    <MudDialog Class="@DialogClass" @ref="deleteDialog" @bind-IsVisible="IsShowDeleteDialog">
        <TitleContent>
            <MudText>
                Delete Order
            </MudText>
        </TitleContent>
        <DialogContent>
            Do you really want to delete these records? This process cannot be undone.
        </DialogContent>
        <DialogActions>
            @if (!viewModel.IsBusy)
            {
                <MudButton OnClick="() => deleteDialog.Close()">Cancel</MudButton>
            }
            <MudButton Color="Color.Error" Variant="Variant.Filled" Disabled="viewModel.IsBusy" OnClick="()=>DoDelete()">
                @if (viewModel.IsBusy)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    <MudText Class="ms-2">Deleting</MudText>
                }
                else
                {
                    <MudText>Delete</MudText>
                }
            </MudButton>
        </DialogActions>
    </MudDialog>
</MudRTLProvider>
<style>
    .dialog-background-class {
        backdrop-filter: blur(10px);
    }
</style>
@code {
    AddOrUpdateOrder addOrUpdateOrderView;
    MudDialog deleteDialog;
    DialogOptions DialogOptions = new DialogOptions()
        {
            ClassBackground = "dialog-background-class",
            CloseOnEscapeKey = true,
            MaxWidth = MaxWidth.ExtraSmall
        };
    string DialogClass = "invisible";
    private string _searchString;

    bool IsShowEditDialog = true;
    bool IsShowDeleteDialog = true;
    protected override Task OnInitializedAsync()
    {
        viewModel.BindPropertyChanged(StateHasChanged);
        return base.OnInitializedAsync();
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        IsShowEditDialog = false;
        IsShowDeleteDialog = false;
        DialogClass = "visible";
        return base.OnAfterRenderAsync(firstRender);
    }

    void OnEdit(OrderContract orderContract)
    {
        addOrUpdateOrderView.ViewModel.UpdateOrderContract = orderContract;
        addOrUpdateOrderView.ViewModel.OnSuccess = () =>
        {
            IsShowEditDialog = false;
            StateHasChanged();
            Snackbar.Add("Order updated.", Severity.Success);
        };
        IsShowEditDialog = true;
    }

    void ShowDeleteDialog(OrderContract orderContract)
    {
        viewModel.SelectedOrderContract = orderContract;
        IsShowDeleteDialog = true;
    }

    void DoDelete()
    {
        IsShowDeleteDialog = true;
        viewModel.OnDelete = (o) =>
        {
            IsShowDeleteDialog = false;
            StateHasChanged();
            Snackbar.Add("Order deleted!", Severity.Success);
        };
        viewModel.DeleteCommand.Execute(viewModel.SelectedOrderContract);
    }

    void CloseDeleteDialog(OrderContract orderContract)
    {
        deleteDialog.Close();
    }
}
